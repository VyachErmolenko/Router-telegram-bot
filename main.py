import asyncio
import logging
import connect

from aiogram import Bot, Dispatcher, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
token = '5834123801:AAG1ZyMbaWdafaLle2vryX29P1J0L1iTLyk'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class MyStates(StatesGroup):
    awaiting_response = State()

@dp.message_handler(commands=['start'])
async def start_command(message: Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('üîÑ–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä'))
    markup.add(KeyboardButton('üë•–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤'))
    await message.answer('‚ùì–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)

@dp.message_handler(lambda message: message.text == 'üîÑ–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä')
async def reboot_router(message: Message):
    connect.off()
    await message.answer('üîÑ–ë–æ—Ç –Ω–∞—á–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è! ‚è±–û–∂–∏–¥–∞–π—Ç–µ!')

@dp.message_handler(lambda message: message.text == 'üë•–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤')
async def show_clients(message: Message):
    await message.answer(connect.get())

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())