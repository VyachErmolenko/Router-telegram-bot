import asyncio, logging
import connect 

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import RestrictChatMember
from aiogram.types import ChatActions
from aiogram.utils.markdown import hlink


token = '5834123801:AAG1ZyMbaWdafaLle2vryX29P1J0L1iTLyk'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot,storage=storage)


@dp.message_handler()
async def start(message: types.Message,state: FSMContext):
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	markup.row(types.KeyboardButton(f'üîÑ–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä'))
	markup.row(types.KeyboardButton(f'üë•–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤'))
	if message.text == '/start':
		await bot.send_message(message.chat.id, '‚ùì–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)
	
	elif message.text == 'üîÑ–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä':
		connect.off()
		await bot.send_message(message.chat.id, 'üîÑ–ë–æ—Ç –Ω–∞—á–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è! ‚è±–û–∂–∏–¥–∞–π—Ç–µ!', reply_markup=markup)

	elif message.text == 'üë•–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤':
		await bot.send_message(message.chat.id, connect.get(), reply_markup=markup)

######
async def main():
	await dp.start_polling(bot)


if __name__ == '__main__':
	asyncio.run(main())